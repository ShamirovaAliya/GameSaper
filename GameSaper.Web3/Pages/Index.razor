@page "/"
@using GameSaper.Domain
@using GameSaper.Web3.Models

@*Реализация для использования JS*@
@inject IJSRuntime JS

@*Ввод параметров поля*@
<EditForm Model=@fieldSize OnValidSubmit=ChoosingFieldSize>
    <ValidationSummary /> @*Компонент, с помощью которого можно сообщить об ошибке*@
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Ширина:</label>
        <InputNumber @bind-Value=fieldSize.Width class="form-control" />
    </div>
    <div class="form-group">
        <label>Длина:</label>
        <InputNumber @bind-Value=fieldSize.Height class="form-control" />
    </div>
    <div class="text-center p-4"><button type="submit" class="btn btn-outline-secondary">Начать новую игру</button></div>
</EditForm>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-5 m-2 border border-white">
            @foreach (var row in field.Rows)
            {
                <div class="row justify-content-center">
                    @foreach (var cell in row.Cells)
                    {
                        <button class="cell" @onmouseup="(mouse) => CellClick(mouse, cell)"><img src="/images/@AssignCells(cell)" /></button>
                        //В кнопку передача всех ячеек
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Field field;
    private FieldSize fieldSize { get; set; } = new();

    protected override void OnInitialized() //Инициализация компонента
    {
        field = new(10, 10, 10);
    }

    private void ChoosingFieldSize() //Метод, по выбору размера поля
    {
        field = new(fieldSize.Height, fieldSize.Width, 10);
        StateHasChanged(); //Метод, для того чтобы сообщить компоненту о том, что произошли изменения и запустить рендеринг(интерфейс)
    }

    private void CellClick(MouseEventArgs mouse, Cell cell) //Метод, обработка нажатия
    {
        if (field.Explode)
        {
            return;
        }
        if (mouse.Button == 0)
        {
            field.CellOpen(cell.Id);
            if (cell.IsBomb)
            {
                Defeat(cell);
            }
            else
            {
                if (field.CheckCells())
                {
                    JS.InvokeVoidAsync("alert", "Поздравляю, вы выиграли!"); //С помощью метода InvokeVoidAsync, взяв с JS функцию alert можно вывести сообщение
                }
                else
                {
                    OpenEmptyCells(cell);
                }
            }
        }
        else if (mouse.Button == 1)
        {
            field.FlagPut(cell.Id);
        }
    }

    private string AssignCells(Cell cell) //Метод, отображение ячеек при открытии
    {
        if (cell.IsOpen)
        {
            if (cell.IsBomb)
            {
                return "bomb.png";
            }
            switch (field.BombCells(cell.Id))
            {
                case 1:
                    return "one.png";
                case 2:
                    return "two.png";
                case 3:
                    return "free.png";
                case 4:
                    return "four.png";
                default:
                    return "background.png";
            }
        }
        if (cell.WithFlag)
        {
            return "flag.png";
        }

        return "default.png";
    }

    private void Defeat(Cell cell)
    {
        foreach (var bomb in field.GetBombs())
        {
            bomb.IsOpen = true;
        }

        JS.InvokeVoidAsync("alert", "Вы проиграли!"); //С помощью метода InvokeVoidAsync, взяв с JS функцию alert можно вывести сообщение

        StateHasChanged(); //Метод, для того чтобы сообщить компоненту о том, что произошли изменения и запустить рендеринг(интерфейс)
    }

    private void OpenEmptyCells(Cell cell) //Метод, по открытию пустых ячеек
    {
        var cells = field.OpenEmptyCells(cell);

        foreach (var openCell in cells)
        {
            AssignCells(openCell);
        }
    }
}