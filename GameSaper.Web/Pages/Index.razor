@page "/"
@using GameSaper.Domain
@using GameSaper.Web.Models
@using System.Threading;

@*Ввод параметров поля*@
<EditForm Model=@fieldSize OnValidSubmit=ChoosingFieldSize>
    <ValidationSummary /> @*Компонент, с помощью которого можно сообщить об ошибке*@
    <DataAnnotationsValidator />
    <p class="text-left text-info"><b>@message</b></p>
    <div class="form-group">
        <label>Ширина:</label>
        <InputNumber @bind-Value=fieldSize.Width class="form-control" />
    </div>
    <div class="form-group">
        <label>Длина:</label>
        <InputNumber @bind-Value=fieldSize.Height class="form-control" />
    </div>
    <div class="form-group">
        <label>Количество бомб:</label>
        <InputNumber @bind-Value=fieldSize.NumberBombs class="form-control" />
    </div>
    <div class="text-center p-4"><button type="submit" class="btn btn-outline-secondary">Начать новую игру</button></div>
</EditForm>

<p class="text-center">Время: @second</p>
<p class="text-center">Оставшиеся бомбы: @remainingBombs</p>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-5 m-2 border border-white">
            @foreach (var row in field.Rows)
            {
                <div class="row justify-content-center">
                    @foreach (var cell in row.Cells)
                    {
                        <button class="cell" @onmouseup="(mouse) => CellMouseUp(mouse, cell)" @onmousedown="(mousedown) => CellMouseDown(mousedown, cell)">
                            <img src="/images/@AssignCells(cell)" />
                        </button>
                        //В кнопку передача всех ячеек
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Field field;

    private string message;

    private int second;
    System.Threading.Timer timer; //Таймер, который использует методы обратного вызова и обслуживается потоками пула потоков

    private int remainingBombs = 10;

    private FieldSize fieldSize { get; set; } = new();

    protected override void OnInitialized() //Инициализация компонента
    {
        field = new(10, 10, 10);
        fieldSize = new FieldSize //Начальные значения для полей Ширина, Длина равные текущему размеру поля при открытии страницы
            {
                Height = 10,
                Width = 10,
                NumberBombs = 10
            };
    }

    private void ChoosingFieldSize() //Метод, по выбору размера поля, установка кол-ва бомб, отображение оставшегося кол-ва бомб и начать новую игру
    {
        int maximumNumberBombs = fieldSize.Height * fieldSize.Width / 2; //Подсчёт половины от общего количества бомб
        if (maximumNumberBombs < fieldSize.NumberBombs)
        {
            message = $"Бомб не должно быть больше половины от общего числа ячеек ({maximumNumberBombs})";
        }
        else if (fieldSize.NumberBombs < 5)
        {
            message = $"Минимальное количество бомб 5.";
        }
        else
        {
            field = new(fieldSize.Height, fieldSize.Width, fieldSize.NumberBombs);

            second = 0;
            remainingBombs = fieldSize.NumberBombs;

            StopTimer();
        }
    }

    private void StartTimer()
    {
        if (timer == null) //Чтобы таймер запускался, если ещё не запущен
        {
            var autoEvent = new AutoResetEvent(false); //Событие автоматического сброса, чтобы сигнализировать о достижении порогового значения тайм-аута в таймере
            second = 0;
            timer = new(OnTimedEvent, null, 0, 1000);
        }
    }

    private void StopTimer()
    {
        if (timer != null)
        {
            timer.Dispose(); //Освобождение ресурсов используемые таймером
            timer = null;
        }
    }

    private void OnTimedEvent(object? sender) //Метод, увеличивание секундов
    {
        second++;
        InvokeAsync(StateHasChanged);
    }

    private void CellMouseUp(MouseEventArgs mouse, Cell cell) //Метод, отпускание кнопки
    {
        if (field.Explode)
        {
            return;
        }
        if (mouse.Button == 0)
        {
            LeftMouseUp(cell);
        }
        else if (mouse.Button == 1)
        {
            field.ToggleSelect(cell);
        }
        else if (mouse.Button == 2)
        {
            RightMouseUp(cell);
        }
    }

    private void LeftMouseUp(Cell cell) //Метод, отпускание левой кнопки
    {
        StartTimer();
        field.CellOpen(cell.Id);

        if (cell.IsBomb)
        {
            Defeat(cell);
            StopTimer();
        }
        else
        {
            if (cell.WithFlag)
            {
                remainingBombs++;
            }

            VictoryConditionCheck(cell);
            OpenEmptyCells(cell);
        }
    }

    private void RightMouseUp(Cell cell) //Метод, отпускание правой кнопки
    {
        field.ToggleFlag(cell.Id);

        if (cell.WithFlag)
        {
            if (field.CheckCells())
            {
                message = "Поздравляю, вы выиграли!";
                StopTimer();
            }

            remainingBombs--;
        }
        else
        {
            remainingBombs++;
        }
    }

    private void CellMouseDown(MouseEventArgs mousedown, Cell cell) //Метод, обработка нажатия средней кнопки
    {
        if (mousedown.Button == 1)
        {
            field.ToggleSelect(cell);
        }
    }

    private string AssignCells(Cell cell) //Метод, отображение ячеек при открытии
    {
        if (cell.IsOpen)
        {
            if (cell.IsBomb)
            {
                return "bomb.png";
            }
            switch (field.BombCells(cell.Id))
            {
                case 1:
                    return "one.png";
                case 2:
                    return "two.png";
                case 3:
                    return "free.png";
                case 4:
                    return "four.png";
                default:
                    return "background.png";
            }
        }
        else if (cell.IsSelected)
        {
            return "selected.png";
        }
        if (cell.WithFlag)
        {
            return "flag.png";
        }

        return "default.png";
    }

    private void VictoryConditionCheck(Cell cell)
    {
        if (field.CheckCells())
        {
            message = "Поздравляю, вы выиграли!";
            StopTimer();
        }
    }

    private void Defeat(Cell cell)
    {
        foreach (var bomb in field.GetBombs())
        {
            bomb.IsOpen = true;
        }

        message = "Вы проиграли!";

        StateHasChanged(); //Метод, для того чтобы сообщить компоненту о том, что произошли изменения и запустить рендеринг(интерфейс)
    }

    private void OpenEmptyCells(Cell cell) //Метод, по открытию пустых ячеек
    {
        var cells = field.OpenEmptyCells(cell);

        foreach (var openCell in cells)
        {
            AssignCells(openCell);
        }
    }
}